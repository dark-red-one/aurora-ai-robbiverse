version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: robbie_postgres
    environment:
      POSTGRES_DB: robbie_v3
      POSTGRES_USER: robbie
      POSTGRES_PASSWORD: robbie_secure_password_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
      - ./db/migrations:/docker-entrypoint-initdb.d/migrations
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U robbie -d robbie_v3"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - robbie_network
    restart: unless-stopped

  # Redis for caching and job queues
  redis:
    image: redis:7-alpine
    container_name: robbie_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - robbie_network
    restart: unless-stopped

  # Ollama AI Model Server
  ollama:
    image: ollama/ollama:latest
    container_name: robbie_ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_MAX_LOADED_MODELS=1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - robbie_network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Zep Memory Store for LLM Applications (using official image)
  zep:
    image: ghcr.io/getzep/zep:0.7.0
    container_name: robbie_zep
    ports:
      - "8000:8000"
    environment:
      - ZEP_API_KEY=robbie_zep_api_key_2024
      - ZEP_DATABASE_URL=postgresql://robbie:robbie_secure_password_2024@postgres:5432/robbie_v3
      - ZEP_REDIS_URL=redis://redis:6379
      - ZEP_SERVER_HOST=0.0.0.0
      - ZEP_SERVER_PORT=8000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - robbie_network
    restart: unless-stopped

  # n8n Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: robbie_n8n
    ports:
      - "5678:5678"
    environment:
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - N8N_HOST=0.0.0.0
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=allan
      - N8N_BASIC_AUTH_PASSWORD=robbie_n8n_password_2024
      - N8N_ENCRYPTION_KEY=robbie_n8n_encryption_key_2024
      - WEBHOOK_URL=http://localhost:5678
    volumes:
      - n8n_data:/home/node/.n8n
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - robbie_network
    restart: unless-stopped

  # Robbie V3 Backend (PM2 Cluster)
  backend:
    build: .
    container_name: robbie_backend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://robbie:robbie_secure_password_2024@postgres:5432/robbie_v3
      REDIS_URL: redis://redis:6379
      PORT: 3000
      JWT_SECRET: robbie_jwt_secret_2024_super_secure
      GROQ_API_KEY: ${GROQ_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      SLACK_BOT_TOKEN: ${SLACK_BOT_TOKEN}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      GMAIL_CLIENT_ID: ${GMAIL_CLIENT_ID}
      GMAIL_CLIENT_SECRET: ${GMAIL_CLIENT_SECRET}
      # Ollama integration
      OLLAMA_HOST: ollama:11434
      OLLAMA_MODEL: llama3.1:8b
      # n8n integration
      N8N_WEBHOOK_BASE: http://n8n:5678/webhook
      MCP_TOKEN: robbie_mcp_token_2024
      # PM2 cluster
      PM2_INSTANCES: 2
      PM2_EXEC_MODE: cluster
      # Deployment configuration
      TOWN_TYPE: ${TOWN_TYPE:-aurora}
      TOWN_NAME: ${TOWN_NAME:-aurora}
      AURORA_HUB: ${AURORA_HUB:-askrobbie.ai}
      SECRET_ANTENNA_ENABLED: ${SECRET_ANTENNA_ENABLED:-true}
      PUBLIC_ACCESS_ENABLED: ${PUBLIC_ACCESS_ENABLED:-true}
      CAPITAL_HQ_ENABLED: ${CAPITAL_HQ_ENABLED:-true}
      SYSTEM_WIDE_SPEAKING_ENABLED: ${SYSTEM_WIDE_SPEAKING_ENABLED:-true}
      EXTERNAL_TALENT_ENABLED: ${EXTERNAL_TALENT_ENABLED:-true}
      AURORA_COMMUNICATION_ENABLED: ${AURORA_COMMUNICATION_ENABLED:-true}
    ports:
      - "3000:3000"
      - "3003:3003"  # WebSocket port
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
      n8n:
        condition: service_healthy
      zep:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./scripts:/app/scripts
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - robbie_network
    restart: unless-stopped

  # Nginx Reverse Proxy with Security
  nginx:
    image: nginx:alpine
    container_name: robbie_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - ./nginx/sites-available:/etc/nginx/sites-available
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled
    depends_on:
      - backend
    networks:
      - robbie_network
    restart: unless-stopped

  # System Monitoring (btop)
  monitoring:
    image: alpine:latest
    container_name: robbie_monitoring
    command: |
      sh -c "
        apk add --no-cache btop htop iotop ncdu tree curl jq bash &&
        echo 'alias chat=\"ollama run llama3.1:8b\"' >> /root/.bashrc &&
        echo 'alias status=\"./scripts/status.sh\"' >> /root/.bashrc &&
        echo 'alias logs=\"tail -f /app/logs/*.log\"' >> /root/.bashrc &&
        echo 'alias db=\"psql postgresql://robbie:robbie_secure_password_2024@postgres:5432/robbie_v3\"' >> /root/.bashrc &&
        echo 'alias redis=\"redis-cli -h redis\"' >> /root/.bashrc &&
        echo 'alias ollama=\"curl http://ollama:11434/api/tags\"' >> /root/.bashrc &&
        echo 'alias n8n=\"curl http://n8n:5678/healthz\"' >> /root/.bashrc &&
        echo 'alias zep=\"curl http://zep:8000/health\"' >> /root/.bashrc &&
        echo 'alias backend=\"curl http://backend:3000/health\"' >> /root/.bashrc &&
        echo 'alias nginx=\"curl http://nginx:80/health\"' >> /root/.bashrc &&
        echo 'alias all=\"echo \"=== Robbie V3 Status ===\" && backend && nginx && redis && ollama && n8n && zep\"' >> /root/.bashrc &&
        echo 'alias robbie=\"bash /app/scripts/robbie.sh\"' >> /root/.bashrc &&
        echo 'alias motd=\"bash /app/scripts/motd.sh\"' >> /root/.bashrc &&
        echo 'alias welcome=\"bash /app/scripts/motd.sh\"' >> /root/.bashrc &&
        echo 'alias robbie_status=\"bash /app/scripts/ps1.sh && robbie_status\"' >> /root/.bashrc &&
        echo 'alias robbie_help=\"bash /app/scripts/ps1.sh && robbie_help\"' >> /root/.bashrc &&
        echo 'alias robbie_info=\"bash /app/scripts/ps1.sh && robbie_info\"' >> /root/.bashrc &&
        echo 'source /app/scripts/ps1.sh' >> /root/.bashrc &&
        chmod +x /app/scripts/motd.sh /app/scripts/ps1.sh /app/scripts/robbie.sh &&
        bash /app/scripts/robbie.sh &&
        tail -f /dev/null
      "
    volumes:
      - ./logs:/app/logs
      - ./scripts:/app/scripts
    networks:
      - robbie_network
    restart: unless-stopped

  # DNS Services for Aurora
  # Bind9 Primary DNS Server
  bind9:
    image: ubuntu/bind9:latest
    container_name: robbie_bind9
    ports:
      - "53:53/udp"
      - "53:53/tcp"
    volumes:
      - ./dns/bind9:/etc/bind
      - ./dns/zones:/var/lib/bind
      - ./dns/logs:/var/log/bind
    networks:
      - robbie_network
    restart: unless-stopped

  # Nginx Proxy Manager - Web-based DNS and SSL management
  nginx-proxy-manager:
    image: jc21/nginx-proxy-manager:latest
    container_name: robbie_nginx_proxy_manager
    ports:
      - "80:80"      # HTTP
      - "443:443"    # HTTPS
      - "81:81"      # Admin interface
    environment:
      - DB_SQLITE_FILE=/data/database.sqlite
      - DISABLE_IPV6=true
    volumes:
      - nginx_proxy_manager_data:/data
      - nginx_proxy_manager_letsencrypt:/etc/letsencrypt
    networks:
      - robbie_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:81"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Consul - Service Discovery and Dynamic DNS (temporarily disabled)
  # consul:
  #   image: consul:1.15
  #   container_name: robbie_consul
  #   ports:
  #     - "8500:8500"  # Web UI
  #     - "8600:8600/udp"  # DNS
  #   environment:
  #     - CONSUL_BIND_INTERFACE=eth0
  #     - CONSUL_CLIENT_INTERFACE=eth0
  #     - CONSUL_UI_BETA=true
  #     - CONSUL_UI_CONFIG_JSON={"ui_config":{"enabled":true,"metrics_provider":"prometheus","metrics_provider_files":["/etc/consul.d/prometheus.json"]}}
  #   volumes:
  #     - consul_data:/consul/data
  #     - ./dns/consul:/consul/config
  #   command: >
  #     consul agent
  #     -server
  #     -bootstrap-expect=1
  #     -ui
  #     -bind=0.0.0.0
  #     -client=0.0.0.0
  #     -retry-join=consul
  #     -data-dir=/consul/data
  #     -config-dir=/consul/config
  #     -domain=robbieverse.com
  #     -recursor=8.8.8.8
  #     -recursor=8.8.4.4
  #   networks:
  #     - robbie_network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "consul", "members"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # DNS Management Service - Automated subdomain creation (temporarily disabled)
  # dns-manager:
  #   build: ./dns-manager
  #   container_name: robbie_dns_manager
  #   environment:
  #     - DATABASE_URL=postgresql://robbie:robbie_secure_password_2024@postgres:5432/robbie_v3
  #     - REDIS_URL=redis://redis:6379
  #     - BIND9_HOST=bind9
  #     - BIND9_PORT=53
  #     - CONSUL_HOST=consul
  #     - CONSUL_PORT=8500
  #     - NGINX_PROXY_MANAGER_URL=http://nginx-proxy-manager:81
  #     - NGINX_PROXY_MANAGER_USER=admin@robbieverse.com
  #     - NGINX_PROXY_MANAGER_PASSWORD=robbie_dns_admin_2024
  #     - LETSENCRYPT_EMAIL=allan@testpilotcpg.com
  #     - PRIMARY_DOMAIN=robbieverse.com
  #     - AURORA_DOMAIN=aurora.robbieverse.com
  #   volumes:
  #     - ./dns/zones:/dns/zones
  #     - ./dns/logs:/dns/logs
  #     - ./dns/ssl:/dns/ssl
  #   depends_on:
  #     - postgres
  #     - redis
  #     - bind9
  #     - consul
  #     - nginx-proxy-manager
  #   networks:
  #     - robbie_network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # DNS Monitoring and Analytics
  dns-monitoring:
    image: alpine:latest
    container_name: robbie_dns_monitoring
    command: |
      sh -c "
        apk add --no-cache bind-tools curl jq bash &&
        echo 'alias dns-status=\"dig @bind9 robbieverse.com SOA\"' >> /root/.bashrc &&
        echo 'alias dns-test=\"dig @bind9 testpilot.robbieverse.com A\"' >> /root/.bashrc &&
        echo 'alias consul-status=\"curl http://consul:8500/v1/status/leader\"' >> /root/.bashrc &&
        echo 'alias nginx-proxy-status=\"curl http://nginx-proxy-manager:81\"' >> /root/.bashrc &&
        echo 'alias dns-logs=\"tail -f /dns/logs/*.log\"' >> /root/.bashrc &&
        echo 'alias create-town=\"curl -X POST http://dns-manager:3001/api/towns\"' >> /root/.bashrc &&
        echo 'alias list-towns=\"curl http://dns-manager:3001/api/towns\"' >> /root/.bashrc &&
        echo 'alias dns-help=\"echo \"=== DNS Commands ===\" && echo \"dns-status - Check DNS server\" && echo \"dns-test - Test subdomain resolution\" && echo \"consul-status - Check service discovery\" && echo \"nginx-proxy-status - Check proxy manager\" && echo \"create-town - Create new town subdomain\" && echo \"list-towns - List all towns\"' >> /root/.bashrc &&
        echo 'source /root/.bashrc' >> /root/.bashrc &&
        tail -f /dev/null
      "
    volumes:
      - ./dns/logs:/dns/logs
    networks:
      - robbie_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local
  n8n_data:
    driver: local
  nginx_proxy_manager_data:
    driver: local
  nginx_proxy_manager_letsencrypt:
    driver: local
  consul_data:
    driver: local

networks:
  robbie_network:
    driver: bridge