version: '3.8'

# Aurora AI Empire - Unified Docker Configuration
# Single source of truth for all environments
# Use with: docker-compose -f docker-compose.unified.yml --env-file .env.{node} up

x-common-variables: &common-variables
  TZ: ${TZ:-UTC}
  NODE_ENV: ${NODE_ENV:-production}
  DEPLOYMENT_ID: ${DEPLOYMENT_ID}
  
x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s

x-logging-defaults: &logging-defaults
  logging:
    driver: "json-file"
    options:
      max-size: "50m"
      max-file: "10"
      
x-restart-policy: &restart-policy
  restart: ${RESTART_POLICY:-unless-stopped}

services:
  # ============================================
  # CORE DATABASE
  # ============================================
  aurora-database:
    image: pgvector/pgvector:pg16
    container_name: aurora-db-${RUNPOD_NODE:-primary}
    <<: *restart-policy
    <<: *logging-defaults
    environment:
      <<: *common-variables
      POSTGRES_DB: ${DB_NAME:-aurora}
      POSTGRES_USER: ${DB_USER:-aurora_app}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: ${DB_AUTH_METHOD:-scram-sha-256}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    volumes:
      - aurora_db_data:/var/lib/postgresql/data
      - ./database/unified-schema:/docker-entrypoint-initdb.d:ro
      - ./database/migrations:/migrations:ro
      - ./backups:/backups
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-aurora_app} -d ${DB_NAME:-aurora}"]
    networks:
      - aurora-network
    deploy:
      resources:
        limits:
          memory: ${DB_MEMORY_LIMIT:-2G}
        reservations:
          memory: ${DB_MEMORY_RESERVE:-1G}

  # ============================================
  # CACHE & SESSION STORE
  # ============================================
  aurora-redis:
    image: redis:7-alpine
    container_name: aurora-redis-${RUNPOD_NODE:-primary}
    <<: *restart-policy
    <<: *logging-defaults
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory ${REDIS_MAX_MEMORY:-512mb}
      --maxmemory-policy ${REDIS_EVICTION:-allkeys-lru}
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - aurora_redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
    networks:
      - aurora-network
    deploy:
      resources:
        limits:
          memory: ${REDIS_MEMORY_LIMIT:-1G}

  # ============================================
  # BACKEND API
  # ============================================
  aurora-backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
      args:
        - NODE_ENV=${NODE_ENV:-production}
        - PYTHON_VERSION=${PYTHON_VERSION:-3.11}
    image: aurora-backend:${DEPLOYMENT_ID:-latest}
    container_name: aurora-backend-${RUNPOD_NODE:-primary}
    <<: *restart-policy
    <<: *logging-defaults
    environment:
      <<: *common-variables
      # Database
      DATABASE_URL: postgresql://${DB_USER:-aurora_app}:${DB_PASSWORD}@aurora-database:5432/${DB_NAME:-aurora}
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@aurora-redis:6379/0
      # API Configuration
      API_PORT: ${API_PORT:-8000}
      API_HOST: ${API_HOST:-0.0.0.0}
      API_WORKERS: ${API_WORKERS:-4}
      # Security
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET: ${JWT_SECRET}
      # AI Services
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      # Node Configuration
      RUNPOD_NODE: ${RUNPOD_NODE:-aurora}
      AURORA_ROLE: ${AURORA_ROLE:-primary}
      GPU_CONFIG: ${GPU_CONFIG:-2xRTX4090}
      # Features
      GPU_MESH_ENABLED: ${GPU_MESH_ENABLED:-true}
      NATURAL_SQL_ENABLED: ${NATURAL_SQL_ENABLED:-true}
    volumes:
      - ./backend:/app
      - ./src:/app/src
      - ./models:/app/models
      - ./data:/app/data
      - aurora_logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      aurora-database:
        condition: service_healthy
      aurora-redis:
        condition: service_healthy
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
    networks:
      - aurora-network
    deploy:
      resources:
        limits:
          memory: ${BACKEND_MEMORY_LIMIT:-4G}
        reservations:
          memory: ${BACKEND_MEMORY_RESERVE:-2G}
          devices:
            - driver: nvidia
              count: ${GPU_COUNT:-all}
              capabilities: [gpu]

  # ============================================
  # FRONTEND (if separate from backend)
  # ============================================
  aurora-frontend:
    profiles: ["frontend"]
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=${NODE_ENV:-production}
    image: aurora-frontend:${DEPLOYMENT_ID:-latest}
    container_name: aurora-frontend-${RUNPOD_NODE:-primary}
    <<: *restart-policy
    <<: *logging-defaults
    environment:
      <<: *common-variables
      API_URL: http://aurora-backend:8000
      PUBLIC_URL: ${PUBLIC_URL:-http://localhost:3000}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      - aurora-backend
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
    networks:
      - aurora-network

  # ============================================
  # MONITORING (Development/Staging only)
  # ============================================
  prometheus:
    profiles: ["monitoring"]
    image: prom/prometheus:latest
    container_name: aurora-prometheus-${RUNPOD_NODE:-primary}
    <<: *restart-policy
    <<: *logging-defaults
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - aurora_prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - aurora-network

  grafana:
    profiles: ["monitoring"]
    image: grafana/grafana:latest
    container_name: aurora-grafana-${RUNPOD_NODE:-primary}
    <<: *restart-policy
    <<: *logging-defaults
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: redis-app
    volumes:
      - aurora_grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    depends_on:
      - prometheus
    networks:
      - aurora-network

  # ============================================
  # GPU MESH COORDINATOR (When enabled)
  # ============================================
  gpu-mesh:
    profiles: ["gpu-mesh"]
    build:
      context: ./gpu_mesh
      dockerfile: Dockerfile
    image: aurora-gpu-mesh:${DEPLOYMENT_ID:-latest}
    container_name: aurora-gpu-mesh-${RUNPOD_NODE:-primary}
    <<: *restart-policy
    <<: *logging-defaults
    environment:
      <<: *common-variables
      MESH_NODE_ID: ${RUNPOD_NODE:-aurora}
      MESH_ROLE: ${AURORA_ROLE:-primary}
      MESH_PEERS: ${MESH_PEERS:-collaboration,fluenti}
    volumes:
      - ./gpu_mesh:/app
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "${MESH_PORT:-9999}:9999"
    networks:
      - aurora-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  # ============================================
  # NGINX REVERSE PROXY (Production only)
  # ============================================
  nginx:
    profiles: ["production"]
    image: nginx:alpine
    container_name: aurora-nginx-${RUNPOD_NODE:-primary}
    <<: *restart-policy
    <<: *logging-defaults
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites:/etc/nginx/sites-enabled:ro
      - ./ssl:/etc/nginx/ssl:ro
      - aurora_static:/usr/share/nginx/html/static:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - aurora-backend
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
    networks:
      - aurora-network

# ============================================
# NETWORKS
# ============================================
networks:
  aurora-network:
    driver: bridge
    ipam:
      config:
        - subnet: ${NETWORK_SUBNET:-172.28.0.0/16}

# ============================================
# VOLUMES
# ============================================
volumes:
  aurora_db_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DB_DATA_PATH:-./data/postgres}
      
  aurora_redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${REDIS_DATA_PATH:-./data/redis}
      
  aurora_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_PATH:-./logs}
      
  aurora_prometheus_data:
    driver: local
    
  aurora_grafana_data:
    driver: local
    
  aurora_static:
    driver: local



