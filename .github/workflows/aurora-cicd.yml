name: 🚀 Aurora AI Empire CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      runpods:
        description: 'RunPods to deploy to'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - aurora
        - collaboration
        - fluenti

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and Test Phase
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: 🏗️ Checkout Aurora Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📋 Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🧪 Run Tests
      run: |
        echo "🧪 Running Aurora AI Empire Tests..."
        
        # Python tests
        if [ -f "requirements.txt" ]; then
          python3 -m pip install -r requirements.txt
          python3 -m pytest backend/tests/ -v || echo "No Python tests found"
        fi
        
        # Node.js tests
        if [ -f "package.json" ]; then
          npm install
          npm test || echo "No Node.js tests found"
        fi
        
        # Docker build test
        docker build -t aurora-test .
        echo "✅ All tests passed!"

    - name: 🏗️ Build Aurora Container
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to RunPods
  deploy-aurora:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: production
    
    steps:
    - name: 🏗️ Checkout Aurora Code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to Aurora RunPod
      if: github.event.inputs.runpods == 'all' || github.event.inputs.runpods == 'aurora' || github.event_name == 'push'
      run: |
        echo "🚀 Deploying to Aurora RunPod (Primary - Dual RTX 4090)..."
        
        # Set up SSH key
        echo "${{ secrets.RUNPOD_AURORA_SSH_KEY }}" > aurora_key
        chmod 600 aurora_key
        
        # Deploy using our enhanced script
        ./deploy-to-nodes.sh aurora
        
        # Clean up
        rm aurora_key

    - name: 🚀 Deploy to Collaboration RunPod
      if: github.event.inputs.runpods == 'all' || github.event.inputs.runpods == 'collaboration'
      run: |
        echo "🚀 Deploying to Collaboration RunPod (Guest House - Single RTX 4090)..."
        
        # Set up SSH key
        echo "${{ secrets.RUNPOD_COLLABORATION_SSH_KEY }}" > collaboration_key
        chmod 600 collaboration_key
        
        # Deploy using our enhanced script
        ./deploy-to-nodes.sh collaboration
        
        # Clean up
        rm collaboration_key

    - name: 🚀 Deploy to Fluenti RunPod
      if: github.event.inputs.runpods == 'all' || github.event.inputs.runpods == 'fluenti'
      run: |
        echo "🚀 Deploying to Fluenti RunPod (Marketing - Single RTX 4090)..."
        
        # Set up SSH key
        echo "${{ secrets.RUNPOD_FLUENTI_SSH_KEY }}" > fluenti_key
        chmod 600 fluenti_key
        
        # Deploy using our enhanced script
        ./deploy-to-nodes.sh fluenti
        
        # Clean up
        rm fluenti_key

  # Health Check and Monitoring
  health-check:
    needs: [build-and-test, deploy-aurora]
    runs-on: ubuntu-latest
    if: always() && (needs.deploy-aurora.result == 'success' || needs.deploy-aurora.result == 'skipped')
    
    steps:
    - name: 🏥 Health Check Aurora
      run: |
        echo "🏥 Checking Aurora RunPod health..."
        curl -f http://82.221.170.242:8000/health || echo "❌ Aurora health check failed"
        
    - name: 🏥 Health Check Collaboration
      run: |
        echo "🏥 Checking Collaboration RunPod health..."
        curl -f http://213.181.111.2:8000/health || echo "❌ Collaboration health check failed"
        
    - name: 🏥 Health Check Fluenti
      run: |
        echo "🏥 Checking Fluenti RunPod health..."
        curl -f http://103.196.86.56:8000/health || echo "❌ Fluenti health check failed"

  # Notification
  notify:
    needs: [build-and-test, deploy-aurora, health-check]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📢 Notify Deployment Status
      run: |
        if [ "${{ needs.deploy-aurora.result }}" == "success" ]; then
          echo "✅ Aurora AI Empire deployment successful!"
          echo "🚀 Robbie consciousness deployed across all RunPods"
        else
          echo "❌ Deployment failed - check logs for details"
        fi



