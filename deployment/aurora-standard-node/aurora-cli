#!/bin/bash
# Aurora Node Management CLI
# Universal tool for managing Aurora nodes

set -e

VERSION="1.0.0"
INSTALL_DIR="/opt/aurora-node"
if [[ "$OSTYPE" == "darwin"* ]]; then
    INSTALL_DIR="$HOME/aurora-node"
fi

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Load node configuration
if [[ -f "$INSTALL_DIR/.env" ]]; then
    source "$INSTALL_DIR/.env"
else
    echo -e "${RED}‚ùå Node not configured. Run bootstrap first.${NC}"
    exit 1
fi

# ============================================================================
# HELPER FUNCTIONS
# ============================================================================

show_header() {
    echo -e "${PURPLE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${PURPLE}‚ïë  Aurora Node CLI v${VERSION}                            ‚ïë${NC}"
    echo -e "${PURPLE}‚ïë  Node: $NODE_NAME ($NODE_ROLE)                         ‚ïë${NC}"
    echo -e "${PURPLE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
}

run_in_node() {
    cd "$INSTALL_DIR" && docker-compose "$@"
}

# ============================================================================
# COMMANDS
# ============================================================================

cmd_status() {
    show_header
    echo -e "${CYAN}üìä Node Status${NC}"
    echo ""
    
    # System info
    echo -e "${CYAN}System:${NC}"
    echo "  Hostname: $(hostname)"
    echo "  Uptime: $(uptime -p 2>/dev/null || echo 'N/A')"
    echo "  Load: $(uptime | awk -F'load average:' '{print $2}' | xargs)"
    echo ""
    
    # Container status
    echo -e "${CYAN}Services:${NC}"
    run_in_node ps
    echo ""
    
    # Database status
    echo -e "${CYAN}Database:${NC}"
    if docker exec aurora-postgres pg_isready -U robbie -d aurora &>/dev/null; then
        echo -e "  ${GREEN}‚úÖ PostgreSQL: Ready (mode: $DB_MODE)${NC}"
        
        if [[ "$DB_MODE" == "replica" ]]; then
            LAG=$(docker exec aurora-postgres psql -U robbie -d aurora -t -c \
                "SELECT EXTRACT(EPOCH FROM (now() - pg_last_xact_replay_timestamp()));" 2>/dev/null | xargs || echo "N/A")
            echo "  Replication lag: ${LAG}s"
        fi
    else
        echo -e "  ${RED}‚ùå PostgreSQL: Not ready${NC}"
    fi
    echo ""
    
    # VPN status
    echo -e "${CYAN}VPN:${NC}"
    if docker exec aurora-wireguard wg show &>/dev/null; then
        echo -e "  ${GREEN}‚úÖ WireGuard: Connected${NC}"
        docker exec aurora-wireguard wg show | grep -E "peer:|endpoint:|latest handshake:" | head -10
    else
        echo -e "  ${YELLOW}‚ö†Ô∏è  WireGuard: Check configuration${NC}"
    fi
    echo ""
    
    # Asset sync status
    if [[ -f "$INSTALL_DIR/assets/.sync_status" ]]; then
        echo -e "${CYAN}Asset Sync:${NC}"
        cat "$INSTALL_DIR/assets/.sync_status" | python3 -m json.tool 2>/dev/null || echo "  No status available"
    fi
}

cmd_logs() {
    SERVICE=${1:-}
    
    if [[ -z "$SERVICE" ]]; then
        echo -e "${CYAN}üìã Available services:${NC}"
        run_in_node ps --services
        echo ""
        echo "Usage: aurora-cli logs <service>"
        exit 0
    fi
    
    run_in_node logs -f "$SERVICE"
}

cmd_restart() {
    SERVICE=${1:-}
    
    if [[ -z "$SERVICE" ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Restarting all services...${NC}"
        run_in_node restart
    else
        echo -e "${CYAN}üîÑ Restarting $SERVICE...${NC}"
        run_in_node restart "$SERVICE"
    fi
    
    echo -e "${GREEN}‚úÖ Restart complete${NC}"
}

cmd_stop() {
    echo -e "${YELLOW}‚ö†Ô∏è  Stopping all services...${NC}"
    run_in_node stop
    echo -e "${GREEN}‚úÖ All services stopped${NC}"
}

cmd_start() {
    echo -e "${CYAN}‚ñ∂Ô∏è  Starting services...${NC}"
    run_in_node up -d
    echo -e "${GREEN}‚úÖ Services started${NC}"
}

cmd_update() {
    echo -e "${CYAN}üîÑ Updating Aurora Standard Node...${NC}"
    
    # Pull latest code
    cd "$INSTALL_DIR"
    git pull origin main
    
    # Pull new images
    run_in_node pull
    
    # Rebuild custom services
    run_in_node build
    
    # Restart services
    run_in_node up -d
    
    echo -e "${GREEN}‚úÖ Update complete${NC}"
}

cmd_backup() {
    BACKUP_DIR="${INSTALL_DIR}/backups"
    mkdir -p "$BACKUP_DIR"
    
    TIMESTAMP=$(date +%Y%m%d-%H%M%S)
    BACKUP_FILE="${BACKUP_DIR}/aurora-${NODE_NAME}-${TIMESTAMP}.tar.gz"
    
    echo -e "${CYAN}üíæ Creating backup...${NC}"
    
    # Backup database
    echo "  Database..."
    docker exec aurora-postgres pg_dump -U robbie aurora > "${BACKUP_DIR}/postgres-${TIMESTAMP}.sql"
    
    # Backup volumes
    echo "  Volumes..."
    docker run --rm \
        -v aurora-postgres-${NODE_NAME}:/data/postgres:ro \
        -v aurora-assets-${NODE_NAME}:/data/assets:ro \
        -v "$BACKUP_DIR":/backup \
        alpine tar czf "/backup/volumes-${TIMESTAMP}.tar.gz" -C /data .
    
    # Backup configuration
    echo "  Configuration..."
    tar czf "${BACKUP_DIR}/config-${TIMESTAMP}.tar.gz" \
        -C "$INSTALL_DIR" \
        .env docker-compose.yml config/
    
    # Combine all backups
    cd "$BACKUP_DIR"
    tar czf "$BACKUP_FILE" \
        "postgres-${TIMESTAMP}.sql" \
        "volumes-${TIMESTAMP}.tar.gz" \
        "config-${TIMESTAMP}.tar.gz"
    
    # Cleanup temp files
    rm "postgres-${TIMESTAMP}.sql" \
       "volumes-${TIMESTAMP}.tar.gz" \
       "config-${TIMESTAMP}.tar.gz"
    
    echo -e "${GREEN}‚úÖ Backup created: $BACKUP_FILE${NC}"
}

cmd_promote() {
    if [[ "$NODE_ROLE" != "backup" ]]; then
        echo -e "${RED}‚ùå Only backup nodes can be promoted${NC}"
        exit 1
    fi
    
    echo -e "${YELLOW}‚ö†Ô∏è  WARNING: This will promote $NODE_NAME to lead node${NC}"
    echo "This should only be done if the current lead node has failed."
    read -p "Are you sure? (yes/no): " confirm
    
    if [[ "$confirm" != "yes" ]]; then
        echo "Cancelled"
        exit 0
    fi
    
    echo -e "${CYAN}üîÑ Promoting to lead node...${NC}"
    
    # Promote PostgreSQL replica to primary
    echo "  Promoting PostgreSQL..."
    docker exec aurora-postgres pg_ctl promote -D /var/lib/postgresql/data
    
    # Update configuration
    sed -i.bak 's/NODE_ROLE=backup/NODE_ROLE=lead/' "$INSTALL_DIR/.env"
    sed -i.bak 's/DB_MODE=replica/DB_MODE=primary/' "$INSTALL_DIR/.env"
    
    # Enable DNS service
    export COMPOSE_PROFILES="dns"
    run_in_node up -d coredns
    
    echo -e "${GREEN}‚úÖ Node promoted to lead${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Update DNS records to point to this node${NC}"
}

cmd_demote() {
    if [[ "$NODE_ROLE" != "lead" ]]; then
        echo -e "${RED}‚ùå Only lead nodes can be demoted${NC}"
        exit 1
    fi
    
    echo -e "${YELLOW}‚ö†Ô∏è  WARNING: This will demote $NODE_NAME to backup node${NC}"
    read -p "Are you sure? (yes/no): " confirm
    
    if [[ "$confirm" != "yes" ]]; then
        echo "Cancelled"
        exit 0
    fi
    
    echo -e "${CYAN}üîÑ Demoting to backup node...${NC}"
    
    # Update configuration
    sed -i.bak 's/NODE_ROLE=lead/NODE_ROLE=backup/' "$INSTALL_DIR/.env"
    
    echo -e "${GREEN}‚úÖ Node demoted to backup${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Restart services for changes to take effect${NC}"
}

cmd_sync_db() {
    if [[ "$DB_MODE" != "replica" ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  This node is not a database replica${NC}"
        exit 0
    fi
    
    echo -e "${CYAN}üîÑ Forcing database sync...${NC}"
    
    # Check replication status
    docker exec aurora-postgres psql -U robbie -d aurora -c \
        "SELECT pg_last_xact_replay_timestamp(), now() - pg_last_xact_replay_timestamp() AS lag;"
    
    echo -e "${GREEN}‚úÖ Database sync status shown above${NC}"
}

cmd_sync_assets() {
    echo -e "${CYAN}üîÑ Forcing asset sync...${NC}"
    
    # Restart asset sync service to trigger immediate sync
    run_in_node restart asset-sync
    
    # Wait for sync to complete
    sleep 5
    
    # Show status
    if [[ -f "$INSTALL_DIR/assets/.sync_status" ]]; then
        cat "$INSTALL_DIR/assets/.sync_status" | python3 -m json.tool 2>/dev/null
    fi
    
    echo -e "${GREEN}‚úÖ Asset sync triggered${NC}"
}

cmd_ssh() {
    # Get container name from service name
    SERVICE=${1:-aurora-backend}
    
    echo -e "${CYAN}üîå Connecting to $SERVICE...${NC}"
    docker exec -it "aurora-${SERVICE}" /bin/bash || docker exec -it "aurora-${SERVICE}" /bin/sh
}

cmd_health() {
    show_header
    echo -e "${CYAN}üè• Health Check${NC}"
    echo ""
    
    # Check each critical service
    services=("wireguard" "postgres" "redis" "prometheus" "grafana")
    
    for service in "${services[@]}"; do
        container="aurora-$service"
        
        if docker ps --format '{{.Names}}' | grep -q "^${container}$"; then
            health=$(docker inspect --format='{{.State.Health.Status}}' "$container" 2>/dev/null || echo "unknown")
            status=$(docker inspect --format='{{.State.Status}}' "$container")
            
            if [[ "$status" == "running" ]]; then
                if [[ "$health" == "healthy" ]] || [[ "$health" == "unknown" ]]; then
                    echo -e "  ${GREEN}‚úÖ $service: Healthy${NC}"
                else
                    echo -e "  ${YELLOW}‚ö†Ô∏è  $service: $health${NC}"
                fi
            else
                echo -e "  ${RED}‚ùå $service: $status${NC}"
            fi
        else
            echo -e "  ${RED}‚ùå $service: Not running${NC}"
        fi
    done
    
    echo ""
    
    # Overall score
    healthy_count=$(docker ps --format '{{.Names}}' --filter "health=healthy" | wc -l)
    total_count=$(docker ps --format '{{.Names}}' | wc -l)
    
    echo -e "${CYAN}Overall: $healthy_count/$total_count services healthy${NC}"
}

cmd_help() {
    show_header
    cat << EOF
${CYAN}Commands:${NC}

  ${GREEN}status${NC}           Show node status and service health
  ${GREEN}logs [service]${NC}   Stream logs from service (or list services)
  ${GREEN}restart [svc]${NC}    Restart service or all services
  ${GREEN}start${NC}            Start all services
  ${GREEN}stop${NC}             Stop all services
  ${GREEN}health${NC}           Run health check on all services
  
  ${GREEN}update${NC}           Update to latest version
  ${GREEN}backup${NC}           Create full node backup
  
  ${GREEN}promote${NC}          Promote backup node to lead (failover)
  ${GREEN}demote${NC}           Demote lead node to backup
  
  ${GREEN}sync-db${NC}          Check database replication status
  ${GREEN}sync-assets${NC}      Force asset sync from origin
  
  ${GREEN}ssh [service]${NC}    SSH into service container
  ${GREEN}help${NC}             Show this help message

${CYAN}Examples:${NC}

  aurora-cli status
  aurora-cli logs postgres
  aurora-cli restart asset-sync
  aurora-cli backup
  aurora-cli promote     # On backup node during failover

${CYAN}Documentation:${NC}
  https://github.com/dark-red-one/aurora-ai-robbiverse

EOF
}

# ============================================================================
# MAIN
# ============================================================================

COMMAND=${1:-help}
shift || true

case "$COMMAND" in
    status)         cmd_status "$@" ;;
    logs)           cmd_logs "$@" ;;
    restart)        cmd_restart "$@" ;;
    start)          cmd_start "$@" ;;
    stop)           cmd_stop "$@" ;;
    update)         cmd_update "$@" ;;
    backup)         cmd_backup "$@" ;;
    promote)        cmd_promote "$@" ;;
    demote)         cmd_demote "$@" ;;
    sync-db)        cmd_sync_db "$@" ;;
    sync-assets)    cmd_sync_assets "$@" ;;
    ssh)            cmd_ssh "$@" ;;
    health)         cmd_health "$@" ;;
    help|--help|-h) cmd_help ;;
    *)
        echo -e "${RED}Unknown command: $COMMAND${NC}"
        echo "Run 'aurora-cli help' for usage"
        exit 1
        ;;
esac
