#!/bin/bash
# Setup comprehensive health monitoring with auto-restart
# Monitors all Aurora Town services and auto-recovers from failures

set -e

echo "üè• Setting up Aurora Town Health Monitoring"
echo "============================================"

# Check if running as root
if [ "$EUID" -ne 0 ]; then 
    echo "‚ùå Please run as root (sudo)"
    exit 1
fi

# Create scripts directory
mkdir -p /home/allan/robbie-ai/scripts
mkdir -p /var/log/aurora

echo "üìù Creating health check script..."

# Create comprehensive health check script
cat > /home/allan/robbie-ai/scripts/health-check.sh << 'HEALTHEOF'
#!/bin/bash
# Aurora Town Comprehensive Health Check
# Runs every 5 minutes via cron

LOG_FILE="/var/log/aurora/health-check.log"
ALERT_FILE="/var/log/aurora/alerts.log"

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a $LOG_FILE
}

alert() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - ALERT: $1" | tee -a $LOG_FILE $ALERT_FILE
}

log "üè• Starting health check..."

# Check AI Router
if ! curl -f -s http://localhost:8000/health > /dev/null 2>&1; then
    alert "AI Router down - restarting..."
    systemctl restart ai-router
    sleep 5
    if curl -f -s http://localhost:8000/health > /dev/null 2>&1; then
        log "‚úÖ AI Router restarted successfully"
    else
        alert "‚ùå AI Router failed to restart!"
    fi
else
    log "‚úÖ AI Router healthy"
fi

# Check Ollama
if ! curl -f -s http://localhost:11434/api/tags > /dev/null 2>&1; then
    alert "Ollama down - restarting..."
    systemctl restart ollama || systemctl start ollama
    sleep 5
    if curl -f -s http://localhost:11434/api/tags > /dev/null 2>&1; then
        log "‚úÖ Ollama restarted successfully"
    else
        alert "‚ùå Ollama failed to restart!"
    fi
else
    log "‚úÖ Ollama healthy"
fi

# Check Nginx
if ! systemctl is-active --quiet nginx; then
    alert "Nginx down - restarting..."
    systemctl restart nginx
    sleep 2
    if systemctl is-active --quiet nginx; then
        log "‚úÖ Nginx restarted successfully"
    else
        alert "‚ùå Nginx failed to restart!"
    fi
else
    log "‚úÖ Nginx healthy"
fi

# Check GPU
if ! nvidia-smi > /dev/null 2>&1; then
    alert "‚ùå GPU not responding! Manual intervention required."
else
    GPU_TEMP=$(nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader)
    GPU_UTIL=$(nvidia-smi --query-gpu=utilization.gpu --format=csv,noheader | tr -d '%')
    GPU_MEM=$(nvidia-smi --query-gpu=memory.used --format=csv,noheader | awk '{print $1}')
    
    log "‚úÖ GPU: ${GPU_TEMP}¬∞C, ${GPU_UTIL}% utilization, ${GPU_MEM}MB used"
    
    if [ $GPU_TEMP -gt 85 ]; then
        alert "‚ö†Ô∏è  GPU temperature high: ${GPU_TEMP}¬∞C"
    fi
fi

# Check PostgreSQL (if installed)
if systemctl list-units --all | grep -q postgresql; then
    if ! systemctl is-active --quiet postgresql; then
        alert "PostgreSQL down - restarting..."
        systemctl restart postgresql
        sleep 5
        if systemctl is-active --quiet postgresql; then
            log "‚úÖ PostgreSQL restarted successfully"
        else
            alert "‚ùå PostgreSQL failed to restart!"
        fi
    else
        log "‚úÖ PostgreSQL healthy"
    fi
fi

# Check Redis (if installed)
if systemctl list-units --all | grep -q redis; then
    if ! systemctl is-active --quiet redis-server; then
        alert "Redis down - restarting..."
        systemctl restart redis-server
        sleep 2
        if systemctl is-active --quiet redis-server; then
            log "‚úÖ Redis restarted successfully"
        else
            alert "‚ùå Redis failed to restart!"
        fi
    else
        log "‚úÖ Redis healthy"
    fi
fi

# Check disk space
DISK_USAGE=$(df -h / | awk 'NR==2 {print $5}' | tr -d '%')
if [ $DISK_USAGE -gt 80 ]; then
    alert "‚ö†Ô∏è  Disk space critical: ${DISK_USAGE}% used"
elif [ $DISK_USAGE -gt 70 ]; then
    log "‚ö†Ô∏è  Disk space warning: ${DISK_USAGE}% used"
else
    log "‚úÖ Disk space: ${DISK_USAGE}% used"
fi

# Check memory usage
MEM_USAGE=$(free | grep Mem | awk '{printf("%.0f", $3/$2 * 100)}')
if [ $MEM_USAGE -gt 90 ]; then
    alert "‚ö†Ô∏è  Memory usage critical: ${MEM_USAGE}%"
else
    log "‚úÖ Memory usage: ${MEM_USAGE}%"
fi

# Check WireGuard VPN (if configured)
if systemctl list-units --all | grep -q "wg-quick@wg0"; then
    if ! systemctl is-active --quiet wg-quick@wg0; then
        alert "WireGuard VPN down - restarting..."
        systemctl restart wg-quick@wg0
        sleep 2
        if systemctl is-active --quiet wg-quick@wg0; then
            log "‚úÖ WireGuard VPN restarted successfully"
        else
            alert "‚ùå WireGuard VPN failed to restart!"
        fi
    else
        VPN_PEERS=$(wg show wg0 peers | wc -l)
        log "‚úÖ WireGuard VPN healthy (${VPN_PEERS} peers)"
    fi
fi

log "üè• Health check complete"
echo ""
HEALTHEOF

chmod +x /home/allan/robbie-ai/scripts/health-check.sh

echo "‚úÖ Health check script created"

# Create cron job
echo "‚è∞ Setting up cron job..."

cat > /etc/cron.d/aurora-health << 'CRONEOF'
# Aurora Town Health Monitoring
# Runs every 5 minutes
SHELL=/bin/bash
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

*/5 * * * * root /home/allan/robbie-ai/scripts/health-check.sh
CRONEOF

chmod 644 /etc/cron.d/aurora-health

echo "‚úÖ Cron job installed"

# Create log rotation config
echo "üìú Setting up log rotation..."

cat > /etc/logrotate.d/aurora << 'LOGROTEOF'
/var/log/aurora/*.log {
    daily
    rotate 7
    compress
    delaycompress
    missingok
    notifempty
    create 0640 root root
}
LOGROTEOF

echo "‚úÖ Log rotation configured"

# Create monitoring dashboard script
cat > /home/allan/robbie-ai/scripts/status-dashboard.sh << 'DASHEOF'
#!/bin/bash
# Aurora Town Status Dashboard
# Quick overview of all services

clear
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë       Aurora Town Status Dashboard                ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo ""

# GPU Status
if nvidia-smi > /dev/null 2>&1; then
    GPU_NAME=$(nvidia-smi --query-gpu=name --format=csv,noheader)
    GPU_TEMP=$(nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader)
    GPU_UTIL=$(nvidia-smi --query-gpu=utilization.gpu --format=csv,noheader)
    GPU_MEM=$(nvidia-smi --query-gpu=memory.used,memory.total --format=csv,noheader)
    echo "üéÆ GPU: $GPU_NAME"
    echo "   Temperature: ${GPU_TEMP}¬∞C | Utilization: $GPU_UTIL | Memory: $GPU_MEM"
else
    echo "‚ùå GPU: Not detected"
fi

echo ""

# Service Status
check_service() {
    SERVICE=$1
    DISPLAY_NAME=$2
    PORT=$3
    
    if systemctl is-active --quiet $SERVICE; then
        if [ -n "$PORT" ]; then
            if curl -f -s http://localhost:$PORT > /dev/null 2>&1; then
                echo "‚úÖ $DISPLAY_NAME: Running (port $PORT)"
            else
                echo "‚ö†Ô∏è  $DISPLAY_NAME: Service up but not responding on port $PORT"
            fi
        else
            echo "‚úÖ $DISPLAY_NAME: Running"
        fi
    else
        echo "‚ùå $DISPLAY_NAME: Down"
    fi
}

check_service "ai-router" "AI Router" "8000"
check_service "nginx" "Nginx" "80"

# Check Ollama
if curl -f -s http://localhost:11434/api/tags > /dev/null 2>&1; then
    MODELS=$(curl -s http://localhost:11434/api/tags | grep -o '"name"' | wc -l)
    echo "‚úÖ Ollama: Running ($MODELS models)"
else
    echo "‚ùå Ollama: Down"
fi

# PostgreSQL
if systemctl list-units --all | grep -q postgresql; then
    check_service "postgresql" "PostgreSQL" ""
fi

# Redis
if systemctl list-units --all | grep -q redis; then
    check_service "redis-server" "Redis" ""
fi

# WireGuard VPN
if systemctl list-units --all | grep -q "wg-quick@wg0"; then
    if systemctl is-active --quiet wg-quick@wg0; then
        PEERS=$(wg show wg0 peers 2>/dev/null | wc -l)
        echo "‚úÖ WireGuard VPN: Running ($PEERS peers connected)"
    else
        echo "‚ùå WireGuard VPN: Down"
    fi
fi

echo ""

# System Resources
DISK_USAGE=$(df -h / | awk 'NR==2 {print $5}')
MEM_USAGE=$(free -h | grep Mem | awk '{print $3"/"$2}')
CPU_LOAD=$(uptime | awk -F'load average:' '{print $2}')

echo "üíª System Resources:"
echo "   Disk: $DISK_USAGE used | Memory: $MEM_USAGE | Load:$CPU_LOAD"

echo ""

# Network
EXTERNAL_IP=$(curl -s https://api.ipify.org 2>/dev/null || echo "N/A")
echo "üåê Network:"
echo "   External IP: $EXTERNAL_IP"
echo "   API Endpoint: http://$EXTERNAL_IP:10002"

echo ""

# Recent Alerts
if [ -f /var/log/aurora/alerts.log ]; then
    ALERT_COUNT=$(wc -l < /var/log/aurora/alerts.log)
    if [ $ALERT_COUNT -gt 0 ]; then
        echo "‚ö†Ô∏è  Recent Alerts ($ALERT_COUNT):"
        tail -5 /var/log/aurora/alerts.log | sed 's/^/   /'
    else
        echo "‚úÖ No recent alerts"
    fi
else
    echo "‚úÖ No alerts logged"
fi

echo ""
echo "Last updated: $(date)"
echo "Run 'sudo /home/allan/robbie-ai/scripts/status-dashboard.sh' to refresh"
DASHEOF

chmod +x /home/allan/robbie-ai/scripts/status-dashboard.sh

echo "‚úÖ Status dashboard script created"

# Run initial health check
echo ""
echo "üß™ Running initial health check..."
bash /home/allan/robbie-ai/scripts/health-check.sh

echo ""
echo "‚úÖ Health Monitoring Setup Complete!"
echo ""
echo "üìã What's Configured:"
echo "===================="
echo "‚úÖ Health checks every 5 minutes"
echo "‚úÖ Auto-restart for failed services"
echo "‚úÖ GPU temperature monitoring"
echo "‚úÖ Disk space monitoring"
echo "‚úÖ Memory usage monitoring"
echo "‚úÖ Alert logging"
echo "‚úÖ Log rotation (7 days)"
echo ""
echo "üìã Commands:"
echo "============"
echo "View status:        sudo /home/allan/robbie-ai/scripts/status-dashboard.sh"
echo "Manual health check: sudo /home/allan/robbie-ai/scripts/health-check.sh"
echo "View health logs:   sudo tail -f /var/log/aurora/health-check.log"
echo "View alerts:        sudo cat /var/log/aurora/alerts.log"
echo ""
echo "üìä Status Dashboard:"
echo "===================="
/home/allan/robbie-ai/scripts/status-dashboard.sh

